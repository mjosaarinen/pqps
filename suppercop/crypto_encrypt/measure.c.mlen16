#include <stdlib.h>
#include "randombytes.h"
#include "cpucycles.h"
#include "crypto_encrypt.h"
#include "measure.h"

const char *primitiveimplementation = crypto_encrypt_IMPLEMENTATION;
const char *implementationversion = crypto_encrypt_VERSION;
const char *sizenames[] = { "outputbytes", "publickeybytes", "secretkeybytes", 0 };
const long long sizes[] = { crypto_encrypt_BYTES, crypto_encrypt_PUBLICKEYBYTES, crypto_encrypt_SECRETKEYBYTES };

// #define MAXTEST_BYTES 100000
#define MAXTEST_BYTES 32

static unsigned char *pk;
static unsigned char *sk;
static unsigned char *m; unsigned long long mlen;
static unsigned char *c; unsigned long long clen;
static unsigned char *t; unsigned long long tlen;

void preallocate(void)
{
#ifdef RAND_R_PRNG_NOT_SEEDED
  RAND_status();
#endif
}

void allocate(void)
{
  pk = alignedcalloc(crypto_encrypt_PUBLICKEYBYTES);
  sk = alignedcalloc(crypto_encrypt_SECRETKEYBYTES);
  m = alignedcalloc(MAXTEST_BYTES + crypto_encrypt_BYTES);
  c = alignedcalloc(MAXTEST_BYTES + crypto_encrypt_BYTES);
  t = alignedcalloc(MAXTEST_BYTES + crypto_encrypt_BYTES);
}

#define TIMINGS 31
static long long cycles[TIMINGS + 1];
static long long bytes[TIMINGS + 1];
static long long rbytes[TIMINGS + 1];
static long long rcalls[TIMINGS + 1];

void measure(void)
{
  int i;
  int loop;

	ENERGY_VARS

  for (loop = 0;loop < LOOPS;++loop) {

	ENERGY_BEGIN

    for (i = 0;i <= TIMINGS;++i) {
      cycles[i] = cpucycles();
      rbytes[i] = randombytes_bytes;
      rcalls[i] = randombytes_calls;
      crypto_encrypt_keypair(pk,sk);
    }

	ENERGY_END


    for (i = 0;i < TIMINGS;++i) cycles[i] = cycles[i + 1] - cycles[i];
    for (i = 0;i < TIMINGS;++i) rbytes[i] = rbytes[i + 1] - rbytes[i];
    for (i = 0;i < TIMINGS;++i) rcalls[i] = rcalls[i + 1] - rcalls[i];
    printentry(-1,"keypair_cycles",cycles,TIMINGS);
    printentry(-1,"keypair_randombytes",rbytes,TIMINGS);
    printentry(-1,"keypair_randomcalls",rcalls,TIMINGS);

	printentry(-1,"pke_kg_ujoule", &uj, 1);
	printentry(-1,"pke_kg_avgcyc", &cyc, 1);

//    for (mlen = 0;mlen <= MAXTEST_BYTES;mlen += 1 + mlen / 4) {
	mlen = 16;
	{
     randombytes(m,mlen);

	ENERGY_BEGIN


      for (i = 0;i <= TIMINGS;++i) {
        cycles[i] = cpucycles();
        rbytes[i] = randombytes_bytes;
        rcalls[i] = randombytes_calls;
        bytes[i] = crypto_encrypt(c,&clen,m,mlen,pk);
	if (bytes[i] == 0) bytes[i] = clen;
      }

	ENERGY_END


      for (i = 0;i < TIMINGS;++i) cycles[i] = cycles[i + 1] - cycles[i];
      for (i = 0;i < TIMINGS;++i) rbytes[i] = rbytes[i + 1] - rbytes[i];
      for (i = 0;i < TIMINGS;++i) rcalls[i] = rcalls[i + 1] - rcalls[i];
      printentry(mlen,"cycles",cycles,TIMINGS);
      printentry(mlen,"bytes",bytes,TIMINGS);
      printentry(mlen,"randombytes",rbytes,TIMINGS);
      printentry(mlen,"randomcalls",rcalls,TIMINGS);

	printentry(mlen, "pke_enc_ujoule", &uj, 1);
	printentry(mlen, "pke_enc_avgcyc", &cyc, 1);


	ENERGY_BEGIN


      for (i = 0;i <= TIMINGS;++i) {
        cycles[i] = cpucycles();
        rbytes[i] = randombytes_bytes;
        rcalls[i] = randombytes_calls;
        bytes[i] = crypto_encrypt_open(t,&tlen,c,clen,sk);
	if (bytes[i] == 0) bytes[i] = tlen;
      }

	ENERGY_END

      for (i = 0;i < TIMINGS;++i) cycles[i] = cycles[i + 1] - cycles[i];
      for (i = 0;i < TIMINGS;++i) rbytes[i] = rbytes[i + 1] - rbytes[i];
      for (i = 0;i < TIMINGS;++i) rcalls[i] = rcalls[i + 1] - rcalls[i];
      printentry(mlen,"open_cycles",cycles,TIMINGS);
      printentry(mlen,"open_bytes",bytes,TIMINGS);
      printentry(mlen,"open_randombytes",rbytes,TIMINGS);
      printentry(mlen,"open_randomcalls",rcalls,TIMINGS);

	printentry(mlen, "pke_dec_ujoule", &uj, 1);
	printentry(mlen, "pke_dec_avgcyc", &cyc, 1);

    }
  }
}
